<!DOCTYPE html>
<html>
  <head>
    <%- include('../partials/head') %>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    <title>chatpage</title>

    <link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic+Coding:wght@400;700&family=Nanum+Gothic:wght@400;700;800&family=Noto+Sans+KR:wght@300;500;700;900&display=swap" rel="stylesheet">
    <!-- bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">
    <style>
    body{
      text-decoration: none;
      list-style: none;
      background-color:#FFDEB8;
    }
    .navbar{
      background-color:#FFDEB8;
      font-family: 'Nanum Gothic', sans-serif;
    }
    .navbar-brand > #h1{
      color: #717171;
      font-weight: 800;
    }
    .navbar-brand > #h1{
      top:0px;
    }
    .navbar-brand > #h3{
      color: #717171;
      font-weight: 800;
    }
    .collapse > .navbar-nav{
      font-family: 'Nanum Gothic', sans-serif;
      color: #717171;
      font-weight: 800;
      font-size: 20px;
    }
    .header2 > .navbar-nav{
      font-family: 'Nanum Gothic', sans-serif;
      color: #717171;
      font-weight: 800;
      font-size: 20px;
    }
    .center{
      border: 2px dashed #707070;
      background-color: #F1FBCF;
    }

     #main_header > #image_rabbit {
       position: absolute;
       left: 260px;
       top: 85px;
     }

     #main_header > #title {
       font-family: 'Nanum Gothic', sans-serif;
       text-align: center;

       color: #717171;
       position: absolute;
       left: 410px;
       top: 230px;
     }

     #main_header > #image_carrot {
       position: absolute;
       left: 660px;
       top: 140px;
     }

     #main_header > #title2 {
       font-family: 'Nanum Gothic', sans-serif;
       text-align: center;

       color: #717171;
       position: absolute;
       left: 800px;
       top: 230px;
     }

     #main_header > #search {
       width: 350px;
       position: absolute;
       left: 530px;
       top: 455px;
     }

     #main_header > #search_button {
       position: absolute;
       left: 832px;
       top: 457px;
     }

     select {
         font-family: 'Nanum Gothic Coding', monospace;
         border: none;
         outline: #C2C2C2;
         width: 150px;
         height: 50px;
         font-size: 30px;
         background: #FFEEDB;
         color: #9E9E9E;
         text-align: center;
         position: absolute;
         left: 350px;
         top: 450px;

     }
     .sent{
        flex-direction: row-reverse;
    }

    .sent .message{
        background-color: #ffeb33;
    }
    .received .message{
        background: #fff;
    }
   </style>
 </head>
 <body>
   <header id="main_header">
    <%- include('../partials/sim2_nav') %>
    </header>

                      <div class="card" style= "background: #FFDEB8; border: 0px; width:50%;height:92vh;
                      margin: 0 auto; /* Added */
                      float: none; /* Added */
                      margin-bottom: 10px; /* Added */ ">

                      <% if(isAuthenticated){ %>
                        <input type="text" id="usernicknamefornotuse" class="form-control"
                        style="border: 1px solid #707070; background: #FFFFFF; font-size: 30px; color:#717171; font-family: 'Segoe UI';font-weight: bold"

                         value = "닉네임 <%=currentUser.username%>" readonly>

                        <% } %>
                        <div id="messages" class="card-block" style=
                        "overflow:scroll;    border: 3px solid #707070; background: #F1FBCF;
                        /* background-image : url('/image/rabbit_.png'); */
                        background-size: 300px;
                        background-repeat: no-repeat;
                        background-position: center center;
                        padding:0;
                        ">

                        <div class="p" id='div_btn' style="padding: 0px;">
                        </div>
                      </div>






    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
    <!-- socekt.io 가져오는것, 필수 -->
    <!-- <script type="text/javascript" src="https://hidden-cove-14850.herokuapp.com/socket.io/socket.io.js"></script>    -->
    <!-- socket.io heroku -->



    <script>

      //console.log(roomscount);
          let exportroomscount;
          let exportusernamearray = [];
          let usernamearray_except_user = [];  // 자기 제외 쿼리
          let socket = io.connect();
          let chatroom_id_mix =[];
          let possiblerooms = [];
          let temp_possiblerooms = [];      // sort해서 순서대로 만드려고.
          let finalroom = [];
          var c = 0;
        // Check for connection
            if(socket !== undefined){
                console.log('Connected to socket... in chatindexsesssss');
                // if('<%= isAuthenticated %>'){
                //   }else{
                //     alert('로그인 먼저 하세요!');
                //     window.location.replace='http://www.localhost:3000/login/';
                //   }

                // Get Status From Server
                socket.on('status', function(data){
                    // get message status
                    setStatus((typeof data === 'object')? data.message : data);

                    // If status is clear, clear text
                    if(data.clear){
                        textarea.value = '';
                    }
                });
            }

            socket.on('exportroomscount', function(data){
                exportroomscount = data;
               // var tar = document.querySelector('#test');
               // test라고 query selector써서 다른곳에서 쓸 수 있게 만듬. 현재 사용 X
            socket.on('exportusernamearray', function(data){
                exportusernamearray = data;
               // var tar2 = document.querySelector('#test2');






                                  console.log(exportroomscount + 'zz');


                                  console.log(possiblerooms);

                                  usernamearray_except_user = exportusernamearray; // 일단넣어주고
                                  console.log(exportusernamearray);


                                  //로그인 되었다면, 그냥진행되고 아니라면,
                                  //'<%= isAuthenticated %>'
                                  //var roomname = "<%= isAuthenticated %>";
//                                   if('<%= isAuthenticated %>'){
//                                     console.log('로그인되었다.');
//                                   }else{
//                                     window.location.replace='http://www.localhost:3000/login/';
//                                   }
// $( document ).ready(function() {
//   window.location.replace='http://www.localhost:3000/login/';
// });
                                  var currentUser = JSON.parse('<%-JSON.stringify(currentUser.username)%>'); // current user(로그인한 유저)를 ejs에서 JSON으로 가져와서 사용.


                                  console.log(currentUser);



                                  for(let i=0; i<exportroomscount; i++){
                                  // 채팅 방 만들기. 버튼으로 할때필요 + possiblerooms 만들고 emit해줄거임.
                                  // currentuser + 가능한 id조합으로 possibleroom을 만든다.
                                        for(let j=i+1; j<exportroomscount; j++){

                                                    console.log(`${i+1},${j+1}`);
                                                    temp_possiblerooms[0] = `${exportusernamearray[i]}`;
                                                    temp_possiblerooms[1] = `${exportusernamearray[j]}`;
                                                    if(temp_possiblerooms[0] != currentUser && temp_possiblerooms[1] != currentUser){
                                                      continue;  // 둘다 커랜트 유저가 아니면 굳이 possible룸에 넣을 필요가 없지요. sort도
                                                    }
                                                    temp_possiblerooms.sort();
                                                    possiblerooms[c] = 'chats/' + temp_possiblerooms[0] + ',' + temp_possiblerooms[1];
                                                    c++;
                                        }
                                  }
                                  c= 0;
                                  console.log(possiblerooms);

                                  socket.emit('possiblerooms', possiblerooms);  // emit한다 possible rooms로 ㅋㅋ
                                  //finalroom
                                  // for (var i = 0; i < exportusernamearray.length; i++) {  // 새롭게 array만들어서 그 사람 제외 버튼을 만들어 준다.
                                  //     // 원소 'username' 삭제

                                  //       if(usernamearray_except_user[i] === currentUser)  {
                                  //         usernamearray_except_user.splice(currentUser, 1);
                                  //         i--;
                                  //     }
                                  // }
                                  // slice가 있지만 filter가 짧고 좀더 그럴싸 하기에!
                                  usernamearray_except_user  = exportusernamearray.filter((element) => element !== currentUser);

                                  console.log(usernamearray_except_user);


                                  socket.on('finalroom', function(data){
                                    finalroom = data;
                                    console.log(finalroom);
                                  $(document).ready(function(){
                                  var str_html = '';


                                  // 버튼을 유저 갯수 - 1 개 추가한다. 즉 3명의 유저가 DB에 있으면 본인 제외 방 2개를 생성 & 본인과 그사람만 있는 방 생성.
                                  // let div = document.createElement('div');
                                  // div.className = "alert";
                                  // div.innerHTML = "<strong>지금 만들어진(DB)에 있는 채팅방 리스트</strong>";
                                  // document.body.append(div);

                                                                            //     // 이거는 전체 유저
                                                                            //     for (var i = 0; i < exportroomscount-1; i++) {

                                                                            //     var html_btn = '<button type="button" class="btn btn-success m-1" id="btn" style="text-align: center; width:100%; height:100px; ">{}</button>';
                                                                            //     html_btn = html_btn.replace('{}', usernamearray_except_user[i]);
                                                                            //     str_html = str_html + html_btn + '\n';
                                                                            // }


                                                                            // $('#div_btn').html(str_html);


                                                                            // // 버튼을 동적연결한다.
                                                                            // $(document).on("click", "#btn", function(){
                                                                            //     var idx = $(this).index();
                                                                            //     alert('{}와 대화하기를 눌렀습니다.'.replace('{}', usernamearray_except_user[idx]))  // 대화할상대


                                                                            // // 순서대로. ID 두개중 앞글자가 빠른순으로 조합을 만든다.
                                                                            // // ex) bubble3jh-bubble2jh 라고 string을 만들어서 chatroom으로 보내준다
                                                                            // // 배열로 하나씩 비교하는방법도 있겠지만 sort함수로 빠르게.
                                                                            // //usernamearray_except_user[idx]
                                                                            // //currentUser
                                                                            // chatroom_id_mix[0] = usernamearray_except_user[idx];
                                                                            // chatroom_id_mix[1] = currentUser;
                                                                            // chatroom_id_mix.sort();



                                                                            // // 여기에서 post를 해줌.
                                                                            // // usernamearray_..idx가 본인이니까 본인 + 상대방정보까지 있어야한다.
                                                                            // document.write('<form action="/chatindex" id="smb_form" method="post"><input type="hidden" name="chatroom" value="'+ chatroom_id_mix +'"><input type="hidden" name="tochatuser" value="'+ usernamearray_except_user[idx] +'"></form>');
                                                                            // document.getElementById("smb_form").submit();
                                                                            // //  var fn = "hello";

                          // 여기가 현재 만들어진 채팅방 목록에서 할 수 있는거...
                          //finalroom zz
                          // let str = finalroom[0].replace(/chats\//g,"");
                          // console.log(str);
                          for(var i in finalroom) { // 객체 가져오면 name즉 채팅방이름만 collection에서 가져옴 ex chats/bubble2jh,bubble3jh
                                                    // collection 다 수정해줌. currentuser없애고 chats 없애고,,, 휴
                                  // console.log(allchatroomsarray[i].name);
                                  finalroom[i] = finalroom[i].replace(/chats\//g,"");
                                  finalroom[i] = finalroom[i].replace(/,/g,"");
                                  finalroom[i] = finalroom[i].replace(currentUser,"");
                          };
                          // finalroom이 전체 목록의 채팅방이라치면 usernamearray_except_user와 같다고~

                          console.log(finalroom);
                          console.log(finalroom.length);
                          for (var i = 0; i < finalroom.length; i++) {

                        //

                          var html_btn = '<button type="button" class="" id="btn" style=" width:100%; height:33.33vh; background-color:#F1FBCF; text-align:right; padding-right: 20%; margin: 0; font-size: 30px; font-family: \'Segoe UI\';font-weight: bold; background-image : url(\'/image/rabbit_.png\');  background-size: 15%;  background-repeat: no-repeat; background-position: 25% 50%;">닉네임 : {}</button>';
                          html_btn = html_btn.replace('{}', finalroom[i]);
                          str_html = str_html + html_btn + '\n';
                          }




                          $('#div_btn').html(str_html);


                          // 버튼을 동적연결한다.
                          $(document).on("click", "#btn", function(){
                          var idx = $(this).index();
                          alert('{}와 대화하기를 눌렀습니다.'.replace('{}', finalroom[idx]))  // 대화할상대


                          // 순서대로. ID 두개중 앞글자가 빠른순으로 조합을 만든다.
                          // ex) bubble3jh-bubble2jh 라고 string을 만들어서 chatroom으로 보내준다
                          // 배열로 하나씩 비교하는방법도 있겠지만 sort함수로 빠르게.
                          //usernamearray_except_user[idx]
                          //currentUser
                          chatroom_id_mix[0] = finalroom[idx];
                          chatroom_id_mix[1] = currentUser;
                          chatroom_id_mix.sort();


                          // 여기에서 post를 해줌.
                          // usernamearray_..idx가 본인이니까 본인 + 상대방정보까지 있어야한다.
                          document.write('<form action="/chatindex" id="smb_form" method="post"><input type="hidden" name="chatroom" value="'+ chatroom_id_mix +'"><input type="hidden" name="tochatuser" value="'+ finalroom[idx] +'"></form>');
                          document.getElementById("smb_form").submit();
                          //  var fn = "hello";



// document.write('<form action="/chatindex" id="smb_form" method="post"><button type="submit" id="chatroom" name="chatroom" value="'+ fn +'"></form>');
// document.getElementById("smb_form").submit();

// <form class="user-form" action="/chatindex" method="post">

//      <div>
//          <button type="submit" name="chatroom" value="<%=currentUser.username%>">ddd</button>
//      </div>

//  </form>
                    });
                  });
                });
            });
        });
    </script>
    <!-- test라고 query selector써서 다른곳에서 쓸 수 있게 만듬. -->
<!--

     <div id="test">test</div>
     <div id="test2">test2</div>


                                                    <script type="text/javascript">

                                                      function add_div(){

                                                          var div = document.createElement('div');



                                                          div.innerHTML = document.getElementById('room_type').innerHTML;

                                                          document.getElementById('field').appendChild(div);

                                                      }



                                                      function remove_div(obj){

                                                      document.getElementById('field').removeChild(obj.parentNode);

                                                      }

                                                      </script>

                                        <input type="button" value="추가" onclick="add_div()"><br/>

                                    <div id="room_type">

                                    <div class="form-group">

                                      <label for="image">제목</label>

                                      <input type="text" id="title" name="title" class="form-control" ></input>

                                    </div>

                                    <input type="button" value="삭제" onclick="remove_div(this)">

                                    </div>

                                    <div id="field"></div> -->


</body>
</html>
